package com.cn.taskmanagement.model;

import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.testng.annotations.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
@ExtendWith(SpringExtension.class)
@SpringBootTest
public class ProjectTest {

    @Test
    public void testDefaultConstructor() {
        // Arrange
        Project project = new Project();

        // Assert
        assertNull(project.getId());
        assertNull(project.getProjectName());
        assertNull(project.getTasks());
    }

    @Test
    public void testParameterizedConstructor() {
        // Arrange
        List<Task> tasks = new ArrayList<>();
        Project project = new Project("ProjectName", tasks);

        // Assert
        assertNull(project.getId()); // As it's generated by JPA
        assertEquals("ProjectName", project.getProjectName());
        assertEquals(tasks, project.getTasks());
    }

    @Test
    public void testGettersAndSetters() {
        // Arrange
        Project project = new Project();
        UUID id = UUID.randomUUID();
        String projectName = "NewProject";
        List<Task> tasks = new ArrayList<>();

        // Act
        project.setId(id);
        project.setProjectName(projectName);
        project.setTasks(tasks);

        // Assert
        assertEquals(id, project.getId());
        assertEquals(projectName, project.getProjectName());
        assertEquals(tasks, project.getTasks());
    }

    @Test
    public void testEqualsAndHashCode() {
        // Arrange
        Project project1 = new Project();
        Project project2 = new Project();
        UUID id = UUID.randomUUID();
        project1.setId(id);
        project2.setId(id);

        // Assert
        assertEquals(project1, project2);
        assertEquals(project1.hashCode(), project2.hashCode());
    }

    // Add more test cases for any additional methods or logic in your entity

}
